// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
#pragma once
#include "EPXString.h"

#define PLAYNOWID					F("00000000-0000-0000-0000-000000000000")

#define JSONKEY_AUTHENTICATIONRESPONSE F("AuthenticationResponse")
#define JSONKEY_COMMAND				F("Command")
#define JSONKEY_CMD					F("CMD")
#define JSONKEY_BRIGHTNESS			F("Brightness")
#define JSONKEY_PREVIEWCOLOR		F("PreviewColor")
#define JSONKEY_PALETTEHEXLENGTH	F("PaletteHexLength")
#define JSONKEY_PALETTESIZE			F("PaletteSize")
#define JSONKEY_LOOPCOUNT			F("LoopCount")
#define JSONKEY_FORCEDLOOPCOUNT		F("ForcedLoopCount")
#define JSONKEY_FRAMERATE			F("FrameRate")
#define JSONKEY_FRAMECOUNT			F("FrameCount")
#define JSONKEY_UTCTIMESTAMP		F("UTC")
#define JSONKEY_PALETTEHEX			F("PaletteHex")
#define JSONKEY_FRAMESHEXLENGTH		F("FramesHexLength")
#define JSONKEY_FRAMESHEX			F("FramesHex")
#define JSONKEY_PIXELHEX			F("PixelHex")
#define JSONKEY_PIXELSHEX			F("PixelsHex")
#define JSONKEY_PIXELSHEXLENGTH		F("PixelsHexLength")
#define JSONKEY_PIXELINDEX			F("PixelIndex")
#define JSONKEY_PLAY				F("PLAY")
#define JSONKEY_RUNUNTILCOMPLETE	F("RunUntilComplete")
#define JSONKEY_ID					F("ID")
#define JSONKEY_NAME				F("Name")
#define JSONKEY_TRANSACTIONID		F("TransactionID")
#define JSONKEY_DEVICENAME			F("DeviceName")
#define JSONKEY_KEY					F("Key")
#define JSONKEY_STORAGEUSED			F("StorageUsed")


#define COMMAND_CLEAR_DISPLAY		F("CLEAR_DISPLAY")
#define COMMAND_CONNECT_HEADERRQ	F("CONNECT_HEADERRQ")
#define COMMAND_ENUMERATE_ANIMATIONS F("ENUMERATE_ANIMATIONS")
#define COMMAND_ENUMERATE_ANIMATIONS2 F("ENUMERATE")
#define COMMAND_PREVIEW_COLOR		F("PREVIEW_COLOR")
#define COMMAND_DISPLAY_BRIGHTNESS	F("DISPLAY_BRIGHTNESS")
#define COMMAND_UPLOAD_FRAME8		F("UPLOAD_FRAME8")
#define COMMAND_UPLOAD_ANIMATION8	F("UPLOAD_ANIMATION8")
#define COMMAND_STORE_ANIMATION8	F("STORE_ANIMATION8")
#define COMMAND_UPLOAD_PIXEL8		F("UPLOAD_PIXEL8")
#define COMMAND_REMOVE_ANIMATION	F("REMOVE_ANIMATION")
#define COMMAND_PLAY_STORED_ANIMATION8 F("PLAY_STORED_ANIMATION8")
#define COMMAND_PLAY_STORED_ANIMATION8_BYNAME F("PLAY_STORED_ANIMATION8_BYNAME")
#define COMMAND_REQUEST_THUMBNAIL	F("REQUEST_THUMBNAIL")
#define COMMAND_SETDEVICENAME		F("SETDEVICENAME")
#define COMMAND_SETKEY				F("SETKEY")


#define JSON_QUOTE  "\""
#define JSON_PAIRSEPARATOR  ": "
#define JSON_CONTINUATION ","
#define JSON_LINESEPARATOR "\n"
#define JSON_STATUS  "status"
#define JSON_SUCCESS  "success"
#define JSON_ERROR  "error"
#define JSON_DATA  "data"
#define JSON_PROGRESS "progress"
#define JSON_CHALLENGE "authchallenge"
#define JSON_TRACE "trace"
#define JSON_OPENOBJECT "{\n"
#define JSON_CLOSEOBJECT "}\n"
#define JSON_CLOSEOBJECT_CONTINUED "},\n"
#define JSON_OPENARRAY "[\n"
#define JSON_CLOSEARRAY "]\n"


#define JSON_QUOTEDVALUE(a) (EPXString(JSON_QUOTE) + EPXString(a) + EPXString(JSON_QUOTE))
#define JSON_KEYOBJECTOPEN(a) (JSON_QUOTEDVALUE(a) + EPXString(JSON_PAIRSEPARATOR) + EPXString(JSON_OPENOBJECT))
#define JSON_KEYOBJECTOPENARRAY(a) (JSON_QUOTEDVALUE(a) + EPXString(JSON_PAIRSEPARATOR) + EPXString(JSON_OPENARRAY))
#define JSON_KEYVALUE_VALUEPAIR_CORE(a,b) (JSON_QUOTEDVALUE(a) + EPXString(JSON_PAIRSEPARATOR) + EPXString(b))
#define JSON_KEYVALUE_VALUEPAIR(a,b) (JSON_KEYVALUE_VALUEPAIR_CORE(a ,b) + EPXString(JSON_LINESEPARATOR))
#define JSON_KEYVALUE_VALUEPAIR_CONTINUED(a,b) (JSON_KEYVALUE_VALUEPAIR_CORE(a, b) + EPXString(JSON_CONTINUATION) + EPXString(JSON_LINESEPARATOR))
#define JSON_KEYVALUE_STRINGPAIR_CORE(a,b) (JSON_QUOTEDVALUE(a) + EPXString(JSON_PAIRSEPARATOR) + JSON_QUOTEDVALUE(b))
#define JSON_KEYVALUE_STRINGPAIR(a,b) (JSON_KEYVALUE_STRINGPAIR_CORE(a ,b) + EPXString(JSON_LINESEPARATOR))
#define JSON_KEYVALUE_STRINGPAIR_CONTINUED(a,b) (JSON_KEYVALUE_STRINGPAIR_CORE(a, b) + EPXString(JSON_CONTINUATION) + EPXString(JSON_LINESEPARATOR))



enum PayloadCommands
{
	PAYLOADCOMMAND_CONNECT_HEADERRQ      = 1,
	PAYLOADCOMMAND_CLEARDISPLAY,
	PAYLOADCOMMAND_DISPLAY_BRIGHTNESS,
	PAYLOADCOMMAND_ENUMERATE_ANIMATIONS,
	PAYLOADCOMMAND_PREVIEW_COLOR,
	PAYLOADCOMMAND_UPLOAD_FRAME8,
	PAYLOADCOMMAND_UPLOAD_ANIMATION8,
	PAYLOADCOMMAND_UPLOAD_PIXEL8,
	PAYLOADCOMMAND_REMOVE_ANIMATION,
	PAYLOADCOMMAND_STORE_ANIMATION8,
	PAYLOADCOMMAND_PLAY_STORED_ANIMATION8,
	PAYLOADCOMMAND_PLAY_STORED_ANIMATION8_BYNAME,
	PAYLOADCOMMAND_SETDEVICENAME,
	PAYLOADCOMMAND_REQUEST_THUMBNAIL,
	PAYLOADCOMMAND_AUTHENTICATION,
	PAYLOADCOMMAND_SETKEY,
	PAYLOADCOMMAND_KNOWN_MAX
};


enum ChannelResponseResult
{
	CHANNELRESPONSERESULT_FAILURE = 0, CHANNELRESPONSERESULT_SUCCESS = 1
};



typedef struct
{
	uint32_t transactionID;
	uint32_t magic;
} BINARY_CHANNEL_RESPONSE;



#pragma pack(push)
#pragma pack(1)
typedef struct 
{
	uint32_t transactionID;
	uint16_t command;
} EPXAPP_PROTOCOL_HEADER;



typedef struct DevicePixelPayload
{
	EPXAPP_PROTOCOL_HEADER Header;
	uint16_t pixelIndex;
	uint8_t pixR;
	uint8_t pixG;
	uint8_t pixB;
	uint8_t pad;
} EPXAPP_PROTOCOL_DEVICEPIXELPAYLOAD;



typedef struct DeviceFramePayload
{
	EPXAPP_PROTOCOL_HEADER Header;
	uint16_t width;
	uint16_t height;
} EPXAPP_PROTOCOL_DEVICEFRAMEPAYLOAD;




enum AnimationPayloadStates { ANIMATIONPAYLOAD_STATE_HEADER, ANIMATIONPAYLOAD_STATE_NAME, ANIMATIONPAYLOAD_STATE_PALETTE, ANIMATIONPAYLOAD_STATE_FRAMES };

typedef struct 
{
	uint8_t						state;
	uint8_t						payloadParsePaletteBytePos;
	uint8_t						payloadParsePaletteRGB[3];	
	uint8_t						sectionFillPos;
	uint32_t					sectionBytesRemaining;
} ANIMATIONPAYLOADSTATEMACHINE;


typedef struct 
{
	EPXAPP_PROTOCOL_HEADER	Header;
	uint8_t					id[16];
	uint32_t				utcTimestamp;
	uint32_t				framesPayloadSize;
	uint16_t				paletteSize;
	uint16_t				frameCount;
	uint8_t					frameRate;
	uint8_t					loopCount;
	uint8_t					nameLength;
	uint8_t					pad;
} EPXAPP_PROTOCOL_ANIMATIONPAYLOAD;



#pragma pack(pop) 

